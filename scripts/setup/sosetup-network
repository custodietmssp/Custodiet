#!/bin/bash
#
# Copyright (C) 2012 Security Onion
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.  You may not use, modify or
# distribute this program under any other version of the GNU General
# Public License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

#########################################
# Variables
#########################################
##DEBUG="0"
DEBUG=1
LOGDIR=/var/log/nsm
LOG=$LOGDIR/sosetup-network.log
HOSTNAME=`hostname`
TITLE="Security Onion Setup ($HOSTNAME)"

###########################################################
# get the network config data
. ${file_data_network} && echo "${file_data_network} has been sourced"
echo MGMT_INTERFACE: ${MGMT_INTERFACE}
echo ADDRESS:        ${ADDRESS}
echo NETMASK:        ${NETMASK}
echo GATEWAY:        ${GATEWAY}
echo NAMESERVER:     ${NAMESERVER}
echo DOMAIN:         ${DOMAIN}
echo MON_INTERFACES: ${MON_INTERFACES}
###########################################################

#########################################
# Check if we've already run
#########################################
if grep "Security Onion" /etc/network/interfaces >/dev/null 2>&1; then
	TEXT='It looks like /etc/network/interfaces has already been configured by this script.\n
	\nWould you like to skip network configuration?'
	YES='Yes, skip network configuration!'
	NO='No, I need to re-configure /etc/network/interfaces.'
	##zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
	ANSWER="$?"
##
ANSWER=0
	if [ $ANSWER -eq 1 ]; then
	    [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No."
	else
	    [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes."
	    # exit 0 so we can continue running Setup
	    exit 0
	fi
else
	# First-time user.  Ask if they want to continue.
	TEXT='Would you like to configure /etc/network/interfaces now?\
\
This is HIGHLY recommended as it will automatically optimize your network interfaces.\
This includes disabling any NIC offload features which may interfere with traffic analysis.\
For more information, please see:\
http://securityonion.blogspot.com/2011/10/when-is-full-packet-capture-not-full.html\
\
If you choose NO, you should manually configure your management and monitored interfaces\
per the instructions on the Security Onion Wiki located at:\
http://code.google.com/p/security-onion/wiki/NetworkConfiguration'
	YES='Yes, configure /etc/network/interfaces!'
	NO='No, not right now.'
	##zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
	ANSWER="$?"
##
ANSWER=0
	if [ $ANSWER -eq 1 ]; then
	    [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No."
	    # exit 0 so we can continue running Setup
	    exit 0
	else
	    [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes."
	fi
fi

#########################################
# Choose management interface
#########################################
# Get a list of all possible interfaces
##MGMT_INTERFACE=`cat "/proc/net/dev" | egrep "(eth|bond|wlan|br|ath|bge|mon|fe)[0-9]+" | 
##	awk '{print $1}' | cut -d\: -f1 | sort `
# If there's only one interface, then  will have the right one
# Otherwise, let the user select
NUM_S=0
for i in `echo $`; do
	let NUM_MGMT_INTERFACES=NUM_MGMT_INTERFACES+1
done

if [ $NUM_MGMT_INTERFACES -eq 0 ]; then
	zenity --error --text="No interfaces found!"
	exit
##elif [ $NUM_MGMT_INTERFACES -eq 1 ]; then
##    TEXT="You only have one interface ($MGMT_INTERFACE), which will be configured as a management interface."
##    zenity --info --title="$TITLE" --text="$TEXT" --no-wrap
elif [ $NUM_MGMT_INTERFACES -gt 1 ]; then
	TEXT='Which network interface should be the management interface?'
	##MGMT_INTERFACE=`cat "/proc/net/dev" | egrep "(eth|bond|wlan|br|ath|bge|mon|fe)[0-9]+" | 
	##	awk '{print $1}' | cut -d\: -f1 | sort |  --list --column="Interface" --hide-header \
	##		--title="$TITLE" --text="$TEXT" 2>/dev/null`
	if [ "$MGMT_INTERFACE" = "" ]; then
		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
		exit
	fi
fi
##
echo MGMT_INTERFACE: ${MGMT_INTERFACE}


#########################################
# Choose static or DHCP configuration for management interface
#########################################
TEXT="Should $MGMT_INTERFACE use DHCP or static addressing?\n\
\n\
Static addressing is highly recommended for production deployments."
##MGMT_CONFIG_TYPE=` --list --radiolist \
##        --column "1" --column "2" --hide-header --title="$TITLE" \
##        FALSE static FALSE DHCP --text="$TEXT"`
##
MGMT_CONFIG_TYPE=static

# Define a function to validate IP addresses    
 is_ip() {
            case "$*" in
                ""|*[!0-9.]*) return 1 ;;
            esac
            oldIFS=$IFS
            IFS='.'
            set -- $*
            IFS=$oldIFS
            [ $# -eq 4 ] || return 1
            for ipseg in $1 $2 $3 $4
              do
              case $ipseg in
                  *[!0-9]*) return 1 ;;
              esac
              [ $ipseg -le 255 ] || return 1
            done
         }

if [ "$MGMT_CONFIG_TYPE" = "DHCP" ]; then
	MANAGEMENT_TEXT="Configure the management interface $MGMT_INTERFACE using DHCP."
elif [ "$MGMT_CONFIG_TYPE" = "static" ]; then
	# Obtain network settings for management interface 
	# Enter static management IP address
	VALID="no"
        while [ $VALID = "no" ]; do
		TEXT="Enter a static IP address for your management interface (e.g., 192.168.1.100):"
		##ADDRESS=` --title="$TITLE" --text="$TEXT" --entry`
		if [ "$ADDRESS" = "" ]; then
			[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
		        exit
		fi
	is_ip $ADDRESS && VALID="yes"
	done

##
if is_ip ${ADDRESS} ; then
	echo IP is ok
else
	echo IP address is invalid
	exit 1
fi

	# Enter subnet mask
	VALID="no"
        while [ $VALID = "no" ]; do
	TEXT="Enter your network's subnet mask (e.g., 255.255.255.0):"
	##NETMASK=` --title="$TITLE" --text="$TEXT" --entry`
	if [ "$NETMASK" = "" ]; then
		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
	        exit
	fi
	is_ip $NETMASK && VALID="yes"
	done

##
if is_ip ${NETMASK} ; then
	echo netmask is ok
else
	echo netmask is invalid
	exit 1
fi

	# Enter gateway IP address
	VALID="no"
        while [ $VALID = "no" ]; do
	TEXT="Enter your gateway's IP address (e.g., 192.168.1.1):"
	##GATEWAY=`zenity --title="$TITLE" --text="$TEXT" --entry`
	if [ "$GATEWAY" = "" ]; then
		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
        	exit
	fi
	is_ip $GATEWAY && VALID="yes"
	done
          
if is_ip ${GATEWAY} ; then
	echo gateway is ok
else
	echo gateway is invalid
	exit 1
fi

	# Enter DNS server address
	VALID="no"
        while [ $VALID = "no" ]; do
        	TEXT="Enter one or more DNS server IP addresses, separated by spaces:\n"
          	##NAMESERVER=`zenity --title="$TITLE" --text="$TEXT" --entry`
          	if [ "$NAMESERVER" = "" ]; then
            		[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
            		exit
          	fi
		VALID="yes"
		for i in `echo $NAMESERVER`; do
			is_ip $i || VALID="no"
		done
	done
          
if is_ip ${NAMESERVER} ; then
	echo nameserver is ok
else
	echo nameserver is invalid
	exit 1
fi

	# Enter domain search order
	VALID="no"
        while [ $VALID = "no" ]; do
		TEXT="Enter your local domain name (e.g., example.com):"
		##DOMAIN=`zenity --title="$TITLE" --text="$TEXT" --entry`
		[ "$DOMAIN" != "" ] && VALID="yes"
	done
          
	MANAGEMENT_TEXT="Configure the management interface $MGMT_INTERFACE as follows: \n\
          Set static IP address of $ADDRESS \n\
          Set the gateway IP address to $GATEWAY \n\
          Set the network mask to $NETMASK \n\
          Set the DNS server(s) to $NAMESERVER \n\
	  Set the DNS domain to $DOMAIN"
else
	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
	exit
fi


#########################################
# Sniffing interfaces
#########################################
# Get potential monitor interfaces (i.e., additional interfaces other than previously configured management interface)
MON_INTERFACES=`cat "/proc/net/dev" | egrep "(eth|bond|wlan|br|ath|bge|mon|fe)[0-9]+" | 
    awk '{print $1}' | cut -d\: -f1 | sort |sed "s|$MGMT_INTERFACE||g"`

NUM_MON_INTERFACES=0
for i in `echo $MON_INTERFACES`; do
    let NUM_MON_INTERFACES=NUM_MON_INTERFACES+1
done

# If there are additional interfaces, offer option to configure them as monitor interfaces
CONFIG_MON_INTERFACES=0
if [ $NUM_MON_INTERFACES -gt 0 ]; then
    TEXT='Would you like to configure monitor interfaces?\
    - Choose YES if this is a Standalone or Sensor installation\
    - Choose NO if this is a Server-only installation (only management interface will be configured)'
    YES='Yes, configure monitor interfaces'
    NO='No, only configure a management interface'
    ##zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
##
ANSWER=1
    ANSWER="$?"
    if [ $ANSWER -eq 1 ]; then
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No."
    else
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes."
        CONFIG_MON_INTERFACES=1
    fi
    
    # If user selected "Yes" to configure monitor interfaces, continue configuration
    if [ $CONFIG_MON_INTERFACES -eq 1 ]; then
        SNIFF_TEXT=""
        if [ $NUM_MON_INTERFACES -gt 0 ]; then
            TEXT='Please select any additional interfaces that will be used for sniffing.'
            INPUT=`for i in $MON_INTERFACES; do echo -n "FALSE $i "; done`
            ##MON_INTERFACES=`zenity --list --checklist --column "Enabled" --column "Interface" \
			##	--hide-header --title="$TITLE" --text="$TEXT" $INPUT |sed 's/|/ /g'`
            if [ "$MON_INTERFACES" = "" ]; then
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
                exit
            fi
            SNIFF_TEXT="    - Configure the following interface(s) for sniffing:\n\
              $MON_INTERFACES"
        fi
    fi
fi

#########################################
# Confirmation dialog box
#########################################
TEXT="We're about to do the following:\n\
    - Backup existing network configuration to /etc/network/interfaces.bak \n\
    - $MANAGEMENT_TEXT \n\
$SNIFF_TEXT \n\
    - REBOOT
    \n\
    After rebooting, you'll need to run Setup again to complete the Setup process.\n\
    \n\
    We're about to make changes to your system! \n\
    \n\
    Would you like to continue?"

YES="Yes, make changes and reboot!"
NO="No, do not make changes!"
##zenity --question --no-wrap --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO"
ANSWER="$?"
##
ANSWER=0
if [ $ANSWER -eq 1 ]; then
	[ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No. Do not proceed."
        exit
else
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes to proceed with all changes."
fi

#########################################
# Make changes
#########################################

# Create the log directory
mkdir -p $LOGDIR

# Stop Network Manager, if it exists (i.e., running Ubuntu Desktop rather than Ubuntu Server), 
# and prevent it from starting on reboot
if [ -e "/etc/init.d/network-manager" ]; then
  /etc/init.d/network-manager stop >> $LOG 2>&1
  [ -f /etc/init/network-manager.conf ] && mv /etc/init/network-manager.conf /etc/init/network-manager.conf.DISABLED
fi

# Remastersys deletes /etc/resolv.conf by default
# This prevents resolvconf from executing and breaks DNS if user chooses Static IP
[ -f /run/resolvconf/resolv.conf ] || touch /run/resolvconf/resolv.conf
[ -f /etc/resolv.conf ] || ln -s /run/resolvconf/resolv.conf /etc/resolv.conf

# Write new network interface configuration file
FILE=/etc/network/interfaces

# Backup existing network interface configuration first
cp $FILE /etc/network/interfaces.bak

cat << EOF > $FILE
# This configuration was created by the Security Onion setup script.  The original network
# interface configuration file was backed up to /etc/networking/interfaces.bak.
   
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# loopback network interface
auto lo
iface lo inet loopback

EOF
    
if [ "$MGMT_CONFIG_TYPE" = "DHCP" ]; then

cat << EOF >> $FILE
# Management network interface
auto $MGMT_INTERFACE
iface $MGMT_INTERFACE inet dhcp

EOF

else

cat << EOF >> $FILE
# Management network interface
auto $MGMT_INTERFACE
iface $MGMT_INTERFACE inet static
  address $ADDRESS
  gateway $GATEWAY
  netmask $NETMASK
  dns-nameservers $NAMESERVER
  dns-domain $DOMAIN

EOF

fi

# Configure remaining interfaces
for INTERFACE in $MON_INTERFACES
do
            	# Get max RX size for monitored interface
            	MAX_RX=$(ethtool -g $INTERFACE | grep -m 1 RX | cut -d\: -f2 | awk '{sub(/^[ \t]+/, "")};1')
    
cat << EOF >> $FILE
auto $INTERFACE
iface $INTERFACE inet manual
  up ifconfig \$IFACE -arp up
  up ip link set \$IFACE promisc on
  down ip link set \$IFACE promisc off
  down ifconfig \$IFACE down
  post-up ethtool -G \$IFACE rx $MAX_RX; for i in rx tx sg tso ufo gso gro lro; do ethtool -K \$IFACE \$i off; done
  post-up echo 1 > /proc/sys/net/ipv6/conf/\$IFACE/disable_ipv6

EOF
done
  
# Initiate reboot
reboot

# If we don't sleep, then it will continue onto normal Setup before the actual reboot
sleep 100
